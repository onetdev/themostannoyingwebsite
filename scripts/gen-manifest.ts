import fs from 'fs/promises';
import path from 'path';

import { ESLint } from 'eslint';
import favicons, {
  type FaviconFile,
  type FaviconImage,
  type FaviconOptions,
} from 'favicons';

import appPackage from '@/../package.json';
import eslintRules from '@/../.eslintrc.js';

const main = async () => {
  const faviconSource = './public/assets/appicon.png';
  const manifestDestPath = './public/manifest';
  const headerDestFile = './src/components/master/GeneratedMetaHead.tsx';
  const pathBase = '/manifest/';

  const configuration: FaviconOptions = {
    path: '/manifest/',
    appName: 'The Most Annoying Website',
    appShortName: 'The MAW',
    developerName: appPackage.author.name,
    developerURL: appPackage.author.url,
    lang: 'en-US',
    display: 'standalone',
    start_url: '/',
    background: '#2f0031',
    theme_color: '#2f0031',
    orientation: 'portrait-primary',
    version: appPackage.version,
    pixel_art: true,
    // shortcuts: [],
  };

  console.log(`Generating favicons from ${faviconSource}`);
  const response = await favicons(faviconSource, configuration);

  console.log(`Writing images into ${manifestDestPath}`);
  storeFiles(manifestDestPath, response.images);

  console.log(`Moving favicon into public root`);
  await fs.copyFile(
    path.join(manifestDestPath, 'favicon.ico'),
    './public/favicon.ico',
  );
  await fs.rm(path.join(manifestDestPath, 'favicon.ico'));

  console.log(`Writing manifest into ${manifestDestPath}`);
  storeFiles(manifestDestPath, response.files);

  console.log(`Generating html headers`);
  await storeAndFormatHeaders(headerDestFile, pathBase, response.html);
};

const autoGeneratedWarning = `## Important\n
This folder was generated by \`gen-manifest\` script. Do not edit it manually, as it will be overwritten on the next run.`;
const headerTemplate = `import Head from 'next/head';

// IMPORTANT: This file is auto-generated by the gen-manifest script.
const GeneratedMetaHead = () => <Head>{{elements}}</Head>;

export default GeneratedMetaHead;`;

const storeFiles = async (
  targetPath: string,
  files: FaviconImage[] | FaviconFile[],
) => {
  await fs.mkdir(targetPath, { recursive: true });
  await fs.writeFile(path.join(targetPath, 'README.md'), autoGeneratedWarning);
  await Promise.all(
    files.map(
      async (file) =>
        await fs.writeFile(path.join(targetPath, file.name), file.contents),
    ),
  );
};

const storeAndFormatHeaders = async (
  destination: string,
  assetPath: string,
  items: string[],
) => {
  // 1. normalizing data
  const headerFlat = items.reduce((carry, current) => {
    let processed = current;

    // LOL, what about self closing tags favicons pkg?
    if (!current.endsWith('/>') && current.endsWith('>')) {
      processed = `${current.slice(0, -1)}/>`;
    }

    // Moving favicon to root so it can be fetched without loading the root
    // html file first
    const faviconPath = path.join(assetPath, '/favicon.ico');
    if (current.match(faviconPath)) {
      processed = processed.replace(faviconPath, '/favicon.ico');
    }

    return `${carry}\n${processed}`;
  }, '');
  const headerInterpolated = headerTemplate.replace('{{elements}}', headerFlat);

  // 2. linting and formatting
  const eslint = new ESLint({
    fix: true,
    overrideConfig: eslintRules,
  });
  const formatted = await eslint.lintText(headerInterpolated);

  // 3. flushing
  fs.writeFile(destination, formatted[0].output || '');
};

main()
  .then(() => console.log(`Aaaaand it's done.`))
  .catch((err) => console.error(`Ooopsie, something went wrong: ${err}`));
